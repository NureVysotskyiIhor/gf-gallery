/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RouteRestorePasswordStep2Import } from './routes/route-restore-password-step2'
import { Route as RouteRestorePasswordStep1Import } from './routes/route-restore-password-step1'
import { Route as RouteRegisterImport } from './routes/route-register'
import { Route as RouteLoginImport } from './routes/route-login'
import { Route as RouteCompleteProfileImport } from './routes/route-complete-profile'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const RouteRestorePasswordStep2Route = RouteRestorePasswordStep2Import.update({
  id: '/route-restore-password-step2',
  path: '/route-restore-password-step2',
  getParentRoute: () => rootRoute,
} as any)

const RouteRestorePasswordStep1Route = RouteRestorePasswordStep1Import.update({
  id: '/route-restore-password-step1',
  path: '/route-restore-password-step1',
  getParentRoute: () => rootRoute,
} as any)

const RouteRegisterRoute = RouteRegisterImport.update({
  id: '/route-register',
  path: '/route-register',
  getParentRoute: () => rootRoute,
} as any)

const RouteLoginRoute = RouteLoginImport.update({
  id: '/route-login',
  path: '/route-login',
  getParentRoute: () => rootRoute,
} as any)

const RouteCompleteProfileRoute = RouteCompleteProfileImport.update({
  id: '/route-complete-profile',
  path: '/route-complete-profile',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/route-complete-profile': {
      id: '/route-complete-profile'
      path: '/route-complete-profile'
      fullPath: '/route-complete-profile'
      preLoaderRoute: typeof RouteCompleteProfileImport
      parentRoute: typeof rootRoute
    }
    '/route-login': {
      id: '/route-login'
      path: '/route-login'
      fullPath: '/route-login'
      preLoaderRoute: typeof RouteLoginImport
      parentRoute: typeof rootRoute
    }
    '/route-register': {
      id: '/route-register'
      path: '/route-register'
      fullPath: '/route-register'
      preLoaderRoute: typeof RouteRegisterImport
      parentRoute: typeof rootRoute
    }
    '/route-restore-password-step1': {
      id: '/route-restore-password-step1'
      path: '/route-restore-password-step1'
      fullPath: '/route-restore-password-step1'
      preLoaderRoute: typeof RouteRestorePasswordStep1Import
      parentRoute: typeof rootRoute
    }
    '/route-restore-password-step2': {
      id: '/route-restore-password-step2'
      path: '/route-restore-password-step2'
      fullPath: '/route-restore-password-step2'
      preLoaderRoute: typeof RouteRestorePasswordStep2Import
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/route-complete-profile': typeof RouteCompleteProfileRoute
  '/route-login': typeof RouteLoginRoute
  '/route-register': typeof RouteRegisterRoute
  '/route-restore-password-step1': typeof RouteRestorePasswordStep1Route
  '/route-restore-password-step2': typeof RouteRestorePasswordStep2Route
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/route-complete-profile': typeof RouteCompleteProfileRoute
  '/route-login': typeof RouteLoginRoute
  '/route-register': typeof RouteRegisterRoute
  '/route-restore-password-step1': typeof RouteRestorePasswordStep1Route
  '/route-restore-password-step2': typeof RouteRestorePasswordStep2Route
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/route-complete-profile': typeof RouteCompleteProfileRoute
  '/route-login': typeof RouteLoginRoute
  '/route-register': typeof RouteRegisterRoute
  '/route-restore-password-step1': typeof RouteRestorePasswordStep1Route
  '/route-restore-password-step2': typeof RouteRestorePasswordStep2Route
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/route-complete-profile'
    | '/route-login'
    | '/route-register'
    | '/route-restore-password-step1'
    | '/route-restore-password-step2'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/route-complete-profile'
    | '/route-login'
    | '/route-register'
    | '/route-restore-password-step1'
    | '/route-restore-password-step2'
  id:
    | '__root__'
    | '/'
    | '/route-complete-profile'
    | '/route-login'
    | '/route-register'
    | '/route-restore-password-step1'
    | '/route-restore-password-step2'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RouteCompleteProfileRoute: typeof RouteCompleteProfileRoute
  RouteLoginRoute: typeof RouteLoginRoute
  RouteRegisterRoute: typeof RouteRegisterRoute
  RouteRestorePasswordStep1Route: typeof RouteRestorePasswordStep1Route
  RouteRestorePasswordStep2Route: typeof RouteRestorePasswordStep2Route
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RouteCompleteProfileRoute: RouteCompleteProfileRoute,
  RouteLoginRoute: RouteLoginRoute,
  RouteRegisterRoute: RouteRegisterRoute,
  RouteRestorePasswordStep1Route: RouteRestorePasswordStep1Route,
  RouteRestorePasswordStep2Route: RouteRestorePasswordStep2Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/route-complete-profile",
        "/route-login",
        "/route-register",
        "/route-restore-password-step1",
        "/route-restore-password-step2"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/route-complete-profile": {
      "filePath": "route-complete-profile.tsx"
    },
    "/route-login": {
      "filePath": "route-login.tsx"
    },
    "/route-register": {
      "filePath": "route-register.tsx"
    },
    "/route-restore-password-step1": {
      "filePath": "route-restore-password-step1.tsx"
    },
    "/route-restore-password-step2": {
      "filePath": "route-restore-password-step2.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
